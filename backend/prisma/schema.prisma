generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String          @id
  email            String          @unique
  name             String?
  avatarUrl        String?
  isSuperUser      Boolean         @default(false)
  meta             Json?
  lastSeen         DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  activityLogs     ActivityLog[]
  comments         Comment[]
  notifications    Notification[]
  projects         Project[]       @relation("Owner")
  memberships      ProjectMember[]
  assignedSubtasks Subtask[]       @relation("AssignedSubtasks")
  createdSubtask   Subtask[]       @relation("CreatedSubtasks")
  assignedTasks    Task[]          @relation("AssignedTasks")
  createdTasks     Task[]          @relation("CreatedTasks")
}

model Project {
  id           String          @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  ownerId      String
  activityLogs ActivityLog[]
  lists        List[]
  owner        User            @relation("Owner", fields: [ownerId], references: [id])
  members      ProjectMember[]
  tasks        Task[]
}

model ProjectMember {
  id        String      @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model List {
  id        String  @id @default(cuid())
  name      String
  order     Int
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]

  @@index([projectId, order])
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  order        Int
  status       String
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  version      Int          @default(1)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  listId       String
  projectId    String
  createdById  String
  assignedToId String?
  comments     Comment[]
  subtasks     Subtask[]
  assignedTo   User?        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdBy    User         @relation("CreatedTasks", fields: [createdById], references: [id])
  list         List         @relation(fields: [listId], references: [id])
  project      Project      @relation(fields: [projectId], references: [id])

  @@index([projectId, listId])
  @@index([assignedToId])
  @@index([projectId, status])
}

model Subtask {
  id         String   @id @default(cuid())
  title      String
  isDone     Boolean  @default(false)
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  taskId     String
  assigneeId String?
  assignerId String?
  assignee   User?    @relation("AssignedSubtasks", fields: [assigneeId], references: [id])
  assigner   User?    @relation("CreatedSubtasks", fields: [assignerId], references: [id])
  task       Task     @relation(fields: [taskId], references: [id])

  @@index([taskId, order])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  taskId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])

  @@index([taskId, createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  meta      Json?
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([userId, createdAt])
}

model ActivityLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  metadata   Json?
  projectId  String
  userId     String
  createdAt  DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([projectId, createdAt])
}

enum ProjectRole {
  ADMIN
  MEMBER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
